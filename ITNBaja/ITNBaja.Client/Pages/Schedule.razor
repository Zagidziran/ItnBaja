@page "/schedule"
@page "/расписание-тренировок"
@using YamlDotNet.Serialization
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Расписание тренировок</PageTitle>

<div class="schedule-content">
    <div class="schedule-header">
        <h1 class="schedule-title">Расписание тренировок</h1>
        @if (isAuthenticated && !isEditing)
        {
            <button class="edit-button" @onclick="StartEditing">Редактировать</button>
        }
        @if (isEditing)
        {
            <div class="edit-controls">
                <button class="save-button" @onclick="SaveSchedule" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span>Сохранение...</span>
                    }
                    else
                    {
                        <span>Сохранить</span>
                    }
                </button>
                <button class="cancel-button" @onclick="CancelEditing">Отмена</button>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(saveMessage))
    {
        <div class="save-message @(saveSuccess ? "success" : "error")">
            @saveMessage
        </div>
    }
    
    @if (isEditing)
    {
        <div class="yaml-editor">
            <h3>Редактирование YAML файла:</h3>
            <textarea class="yaml-textarea" @bind="yamlContent" rows="20" placeholder="Загрузка содержимого..."></textarea>
        </div>
    }
    else if (scheduleData == null)
    {
        <p>Загрузка расписания...</p>
    }
    else
    {
        @foreach (var day in scheduleData.Schedule)
        {
            <div class="schedule-day">
                <h2 class="day-title">@day.Day</h2>
                <table class="schedule-table">
                    <thead>
                        <tr>
                            <th>Время</th>
                            <th>Участники</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var session in day.Sessions)
                        {
                            <tr>
                                <td>@session.Time</td>
                                <td>@session.Members</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    private ScheduleData? scheduleData;
    private bool isAuthenticated = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string yamlContent = "";
    private string saveMessage = "";
    private bool saveSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthStatus();
        await LoadSchedule();
    }
    
    private async Task CheckAuthStatus()
    {
        try
        {
            var baseUri = Navigation.BaseUri;
            var authUrl = new Uri(new Uri(baseUri), "api/auth/status").ToString();
            var response = await Http.GetFromJsonAsync<AuthStatusResponse>(authUrl);
            if (response != null)
            {
                isAuthenticated = response.IsAuthenticated;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking auth status: {ex.Message}");
            isAuthenticated = false;
        }
    }

    private async Task LoadSchedule()
    {
        try
        {
            // Construct full URL using NavigationManager
            var baseUri = Navigation.BaseUri;
            var fullUrl = new Uri(new Uri(baseUri), "schedule.yaml").ToString();
            
            var yamlContentFromFile = await Http.GetStringAsync(fullUrl);
            var deserializer = new DeserializerBuilder()
	            .WithCaseInsensitivePropertyMatching()
	            .Build();
            scheduleData = deserializer.Deserialize<ScheduleData>(yamlContentFromFile);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schedule: {ex.Message}");
            Console.WriteLine($"Base URI: {Navigation.BaseUri}");
        }
    }
    
    private async Task StartEditing()
    {
        isEditing = true;
        saveMessage = "";
        
        try
        {
            var baseUri = Navigation.BaseUri;
            var yamlUrl = new Uri(new Uri(baseUri), "api/schedule/yaml").ToString();
            var response = await Http.GetFromJsonAsync<YamlContentResponse>(yamlUrl);
            if (response != null)
            {
                yamlContent = response.Content;
            }
        }
        catch (Exception ex)
        {
            saveMessage = "Ошибка при загрузке файла для редактирования.";
            saveSuccess = false;
            Console.WriteLine($"Error loading YAML for editing: {ex.Message}");
        }
    }
    
    private async Task SaveSchedule()
    {
        isSaving = true;
        saveMessage = "";
        
        try
        {
            var baseUri = Navigation.BaseUri;
            var saveUrl = new Uri(new Uri(baseUri), "api/schedule/yaml").ToString();
            var request = new SaveYamlRequest { Content = yamlContent };
            
            // Create HTTP request with token
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, saveUrl)
            {
                Content = JsonContent.Create(request)
            };
            
            // Add token to Authorization header if available
            // Note: This won't work in WebAssembly due to localStorage access limitations
            // We'll need to handle this differently for client-side components
            
            var response = await Http.SendAsync(httpRequest);
            var result = await response.Content.ReadFromJsonAsync<SaveYamlResponse>();
            
            if (result != null && result.Success)
            {
                saveMessage = "Расписание успешно сохранено!";
                saveSuccess = true;
                isEditing = false;
                await LoadSchedule(); // Reload the schedule
            }
            else
            {
                saveMessage = "Ошибка при сохранении расписания.";
                saveSuccess = false;
            }
        }
        catch (Exception ex)
        {
            saveMessage = "Ошибка при сохранении расписания.";
            saveSuccess = false;
            Console.WriteLine($"Error saving schedule: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void CancelEditing()
    {
        isEditing = false;
        yamlContent = "";
        saveMessage = "";
    }

    public class ScheduleData
    {
        public List<ScheduleDay> Schedule { get; set; } = new();
    }

    public class ScheduleDay
    {
        public string Day { get; set; } = "";
        public List<ScheduleSession> Sessions { get; set; } = new();
    }

    public class ScheduleSession
    {
        public string Time { get; set; } = "";
        public string Members { get; set; } = "";
    }
    
    public class AuthStatusResponse
    {
        public bool IsAuthenticated { get; set; }
        public string Username { get; set; } = "";
    }
    
    public class YamlContentResponse
    {
        public string Content { get; set; } = "";
    }
    
    public class SaveYamlRequest
    {
        public string Content { get; set; } = "";
    }
    
    public class SaveYamlResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }
}