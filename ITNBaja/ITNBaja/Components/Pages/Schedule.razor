@page "/schedule"
@page "/расписание-тренировок"
@using YamlDotNet.Serialization
@using System.Net.Http.Json
@using ITNBaja.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthStateService AuthState
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Расписание тренировок</PageTitle>

<div class="schedule-content">
    <div class="schedule-header">
        <h1 class="schedule-title">Расписание тренировок</h1>
        @if (isAuthenticated && !isEditing)
        {
            <button class="edit-button" @onclick="StartEditing">Редактировать</button>
        }
        @if (isEditing)
        {
            <div class="edit-controls">
                <button class="save-button" @onclick="SaveSchedule" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span>Сохранение...</span>
                    }
                    else
                    {
                        <span>Сохранить</span>
                    }
                </button>
                <button class="cancel-button" @onclick="CancelEditing">Отмена</button>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(saveMessage))
    {
        <div class="save-message @(saveSuccess ? "success" : "error")">
            @saveMessage
        </div>
    }
    
    @if (isEditing)
    {
        <div class="yaml-editor">
            <h3>Редактирование YAML файла:</h3>
            <textarea class="yaml-textarea" @bind="yamlContent" rows="20" placeholder="Загрузка содержимого..."></textarea>
        </div>
    }
    else if (scheduleData == null)
    {
        <p>Загрузка расписания...</p>
    }
    else
    {
        @foreach (var day in scheduleData.Schedule)
        {
            <div class="schedule-day">
                <h2 class="day-title">@day.Day</h2>
                <table class="schedule-table">
                    <thead>
                        <tr>
                            <th>Время</th>
                            <th>Участники</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var session in day.Sessions)
                        {
                            <tr>
                                <td>@session.Time</td>
                                <td>@session.Members</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    private ScheduleData? scheduleData;
    private bool isAuthenticated = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string yamlContent = "";
    private string saveMessage = "";
    private bool saveSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to auth state changes
        AuthState.OnAuthStateChanged += OnAuthStateChanged;
        
        // Check initial auth status
        await AuthState.CheckAuthStatusAsync();
        isAuthenticated = AuthState.IsAuthenticated;
        
        await LoadSchedule();
    }
    
    private void OnAuthStateChanged()
    {
        var wasAuthenticated = isAuthenticated;
        isAuthenticated = AuthState.IsAuthenticated;
        
        Console.WriteLine($"Auth state changed: was {wasAuthenticated}, now {isAuthenticated}");
        
        // If user logged out while editing, cancel editing
        if (wasAuthenticated && !isAuthenticated && isEditing)
        {
            Console.WriteLine("User logged out while editing - cancelling edit mode");
            CancelEditing();
        }
        
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadSchedule()
    {
        try
        {
            // Construct full URL using NavigationManager
            var baseUri = Navigation.BaseUri;
            var fullUrl = new Uri(new Uri(baseUri), "schedule.yaml").ToString();
            
            var yamlContentFromFile = await Http.GetStringAsync(fullUrl);
            var deserializer = new DeserializerBuilder()
	            .WithCaseInsensitivePropertyMatching()
	            .Build();
            scheduleData = deserializer.Deserialize<ScheduleData>(yamlContentFromFile);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schedule: {ex.Message}");
            Console.WriteLine($"Base URI: {Navigation.BaseUri}");
        }
    }
    
    private async Task StartEditing()
    {
        isEditing = true;
        saveMessage = "";
        
        try
        {
            // Read directly from file system since we're on the server
            var filePath = Path.Combine(Environment.WebRootPath, "schedule.yaml");
            if (File.Exists(filePath))
            {
                yamlContent = await File.ReadAllTextAsync(filePath);
            }
            else
            {
                saveMessage = "Файл расписания не найден.";
                saveSuccess = false;
            }
        }
        catch (Exception ex)
        {
            saveMessage = "Ошибка при загрузке файла для редактирования.";
            saveSuccess = false;
            Console.WriteLine($"Error loading YAML for editing: {ex.Message}");
        }
    }
    
    private async Task SaveSchedule()
    {
        isSaving = true;
        saveMessage = "";
        
        try
        {
            // Check authentication
            if (!AuthState.IsAuthenticated)
            {
                saveMessage = "Необходима авторизация для сохранения.";
                saveSuccess = false;
                return;
            }

            // Save directly to file system since we're on the server
            var filePath = Path.Combine(Environment.WebRootPath, "schedule.yaml");
            await File.WriteAllTextAsync(filePath, yamlContent);
            
            saveMessage = "Расписание успешно сохранено!";
            saveSuccess = true;
            isEditing = false;
            await LoadSchedule(); // Reload the schedule
        }
        catch (Exception ex)
        {
            saveMessage = "Ошибка при сохранении расписания.";
            saveSuccess = false;
            Console.WriteLine($"Error saving schedule: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void CancelEditing()
    {
        isEditing = false;
        yamlContent = "";
        saveMessage = "";
    }

    public class ScheduleData
    {
        public List<ScheduleDay> Schedule { get; set; } = new();
    }

    public class ScheduleDay
    {
        public string Day { get; set; } = "";
        public List<ScheduleSession> Sessions { get; set; } = new();
    }

    public class ScheduleSession
    {
        public string Time { get; set; } = "";
        public string Members { get; set; } = "";
    }


    
    public void Dispose()
    {
        AuthState.OnAuthStateChanged -= OnAuthStateChanged;
    }
}