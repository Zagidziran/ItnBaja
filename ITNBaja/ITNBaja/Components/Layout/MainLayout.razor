@inherits LayoutComponentBase
@using ITNBaja.Components.Shared

<div class="page">
    <nav class="top-menu">
        <div class="menu-container">
            <a href="/about" class="menu-item">О школе</a>
            <a href="/team" class="menu-item">Команда</a>
            <a href="/area" class="menu-item">Площадка</a>
            <a href="/schedule" class="menu-item">Расписание тренировок</a>
            <a href="/equipment" class="menu-item">Техника</a>
            <a href="/contacts" class="menu-item">Контакты</a>
        </div>
    </nav>

    <div class="header-banner">
        <div class="banner-left">
            <img src="Biker.png" alt="Biker" class="banner-image" />
            <h1 class="banner-text">Институт Тюнинга и Настройки Baja</h1>
        </div>
        <div class="banner-right">
            <a href="/login" class="contacts-link" id="auth-button">Войти</a>
        </div>
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check auth status and update button via JavaScript
            await CheckAuthStatusAndUpdateButton();
        }
    }
    
    private async Task CheckAuthStatusAndUpdateButton()
    {
        try
        {
            // This will be handled by JavaScript polling
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in auth check: {ex.Message}");
        }
    }
}

<script>
    window.authButtonManager = {
        checkAuthStatus: async function() {
            try {
                const token = localStorage.getItem('authToken');
                const headers = {};
                
                if (token) {
                    headers['Authorization'] = `Token ${token}`;
                }
                
                const response = await fetch('/api/auth/status', { headers });
                const result = await response.json();
                const button = document.getElementById('auth-button');
                
                console.log('Auth status result:', result);
                console.log('IsAuthenticated:', result.IsAuthenticated);
                
                if (button) {
                    if (result.IsAuthenticated) {
                        console.log('Setting button to logout mode');
                        button.textContent = 'Выйти';
                        button.onclick = function(e) {
                            e.preventDefault();
                            window.authButtonManager.logout();
                        };
                        button.href = '#';
                    } else {
                        console.log('Setting button to login mode');
                        button.textContent = 'Войти';
                        button.onclick = null;
                        button.href = '/login';
                        
                        // Clear invalid token
                        if (token) {
                            localStorage.removeItem('authToken');
                        }
                    }
                }
            } catch (error) {
                console.error('Error checking auth status:', error);
            }
        },
        
        logout: async function() {
            try {
                const token = localStorage.getItem('authToken');
                const headers = { 'Content-Type': 'application/json' };
                
                if (token) {
                    headers['Authorization'] = `Token ${token}`;
                }
                
                await fetch('/api/auth/logout', { 
                    method: 'POST',
                    headers: headers
                });
                
                // Clear token from localStorage
                localStorage.removeItem('authToken');
                
                // Show logout message
                const message = document.createElement('div');
                message.className = 'logout-message-js';
                message.textContent = 'Вы успешно вышли из системы.';
                message.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #d4edda;
                    color: #155724;
                    padding: 1rem 1.5rem;
                    border-radius: 6px;
                    border: 1px solid #c3e6cb;
                    font-weight: 500;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    z-index: 1000;
                `;
                document.body.appendChild(message);
                
                // Remove message after 3 seconds
                setTimeout(() => {
                    if (message.parentNode) {
                        message.parentNode.removeChild(message);
                    }
                }, 3000);
                
                // Update button
                this.checkAuthStatus();
            } catch (error) {
                console.error('Error during logout:', error);
            }
        },
        
        startPolling: function() {
            // Check immediately
            this.checkAuthStatus();
            
            // Then check every 500ms for more responsive updates
            setInterval(() => {
                this.checkAuthStatus();
            }, 500);
        },
        
        triggerCheck: function() {
            // Manual trigger for immediate check
            this.checkAuthStatus();
        }
    };
    
    // Global function to trigger auth check
    window.triggerAuthCheck = function() {
        if (window.authButtonManager) {
            window.authButtonManager.triggerCheck();
        }
    };
    
    // Start polling when page loads
    document.addEventListener('DOMContentLoaded', function() {
        window.authButtonManager.startPolling();
    });
</script>
